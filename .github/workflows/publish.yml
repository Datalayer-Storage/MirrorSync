name: Publish

on:
  push:
    tags:
      - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        runtime: [win-x64] #, linux-x64, osx-x64]
    runs-on: windows-2019
    env:
      SRC: 'DlMirrorSync'
      NAME: 'DlMirrorSync'
      FRAMEWORK: 'net8.0'
      VERSION: '0.2.1'
      OUTPUT_ROOT: './publish'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build project
        run: dotnet publish ./${{ env.SRC }}/${{ env.NAME }}.csproj -c Release -r ${{ matrix.RUNTIME }} --framework ${{ env.FRAMEWORK }} --self-contained true /p:Version=${{ env.VERSION }} /p:PublishReadyToRun=true /p:PublishSingleFile=True /p:PublishTrimmed=false /p:IncludeNativeLibrariesForSelfExtract=True /p:PublishDir="bin\Release/${{ env.FRAMEWORK }}/${{ matrix.RUNTIME }}" --output ${{ env.OUTPUT_ROOT }}/standalone/${{ matrix.RUNTIME }}

      - name: Setup Certificate
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
          cat /d/Certificate_pkcs12.p12
        shell: bash
      
      - name: Set variables
        id: variables
        run: |
          echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
          echo "::set-output name=KEYPAIR_NAME::Key_454819080"
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert Keylocker Tools" >> $GITHUB_PATH
        shell: bash

      - name: Setting up the client tools
        run: |
          curl -X GET  https://one.digicert.com/signingmanager/api-ui/v1/releases/Keylockertools-windows-x64.msi/download?account_id=e94ff86e-6519-4598-a066-6b6b252245f0 -H "x-api-key:%SM_API_KEY%" -o smtools-windows-x64.msi
          msiexec /i smtools-windows-x64.msi /qn
        shell: cmd

      - name: Setup SSM KSP on windows latest
        run: |
          curl -X GET  https://stage.one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o smtools-windows-x64.msi
          msiexec /i smtools-windows-x64.msi /quiet /qn
          smksp_registrar.exe list
          smctl.exe keypair ls
          C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user
          smksp_cert_sync.exe
        shell: cmd

      - name: Signing using Signtool
        run: |
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 ${{ env.OUTPUT_ROOT }}\standalone\${{ matrix.RUNTIME }}\${{ env.NAME }}.exe

      - name: Signtool verify
        run: |
          signtool verify /v /pa ${{ env.OUTPUT_ROOT }}\standalone\${{ matrix.RUNTIME }}\${{ env.NAME }}.exe
        shell: cmd

      - name: Setup WiX
        if: matrix.RUNTIME == 'win-x64'
        run: dotnet tool install -g wix; wix extension add -g WixToolset.UI.wixext

      - name: Build installer
        if: matrix.RUNTIME == 'win-x64'
        working-directory: ./MsiInstaller
        run: dotnet build MsiInstaller.wixproj -c Release -r win-x64 --output ../${{ env.OUTPUT_ROOT }}

      - name: Signing WinInstaller using Signtool
        working-directory: ${{ env.OUTPUT_ROOT }}/en-us
        run: |
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 ./${{ env.NAME }}-service-win-x64.msi

      - name: Signtool verify WinInstaller
        working-directory: ${{ env.OUTPUT_ROOT }}/en-us
        run: |
          signtool verify /v /pa ./${{ env.NAME }}-service-win-x64.msi
        shell: cmd

      - name: Upload installer
        uses: actions/upload-artifact@v3
        if: matrix.RUNTIME == 'win-x64'
        with:
          name: ${{ env.NAME }}-${{ env.VERSION }}-service-win-x64.msi
          path: ${{ env.OUTPUT_ROOT }}/en-us/*.msi
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME }}-${{ env.VERSION }}-standalone-${{ matrix.RUNTIME }}
          path: ${{ env.OUTPUT_ROOT }}/standalone/${{ matrix.RUNTIME }}/
  
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [win-x64]
    env:
      SRC: 'DlMirrorSync'
      NAME: 'DlMirrorSync'
      FRAMEWORK: 'net8.0'
      VERSION: '0.2.1'
      OUTPUT_ROOT: './publish'
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build

    steps:
      - uses: chrislennon/action-aws-cli@v1.1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      
      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.NAME }}-${{ env.VERSION }}-standalone-${{ matrix.RUNTIME }}
          path: ${{ env.OUTPUT_ROOT }}/standalone/${{ matrix.RUNTIME }}/

      - name: Get tag name
        id: tag-name
        run: echo "TAGNAME=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      - name: List files
        working-directory: ./publish
        run: |
          ls -la
        shell: bash

      - name: List files
        working-directory: ${{ env.OUTPUT_ROOT }}/standalone/${{ matrix.RUNTIME }}
        run: |
          ls -la
        shell: bash

      - name: Upload to S3 with checksum
        run: |
          winInstallerFile=${{ env.OUTPUT_ROOT }}/standalone/${{ matrix.RUNTIME }}/${{ env.NAME }}-service-win-x64.msi
          winInstallerChecksum=$(md5sum "$winInstallerFile" | cut -d ' ' -f 1)
          aws s3 cp "$winInstallerFile" s3://dlaas/releases/${{ env.NAME }}-${{ env.VERSION }}-service-win-x64-${{ steps.tag-name.outputs.TAGNAME }}.msi --metadata md5="$winInstallerChecksum"
          aws s3 cp "$winInstallerFile" s3://dlaas/releases/${{ env.NAME }}-${{ env.VERSION }}-service-win-x64-latest.msi --metadata md5="$winInstallerChecksum"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'