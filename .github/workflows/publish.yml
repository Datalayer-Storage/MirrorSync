name: Publish

on:
    workflow_dispatch:

jobs:
    build:
        strategy:
            matrix:
                runtime: [win-x64] #, linux-x64, osx-x64]
        runs-on: windows-latest
        env:
            SRC: "DlMirrorSync"
            NAME: "DlMirrorSync"
            FRAMEWORK: "net8.0"
            VERSION: "0.2.1"
            OUTPUT_ROOT: "./publish"
        steps:
            - uses: actions/checkout@v3
            # - name: Setup tmate session
            #   uses: mxschmitt/action-tmate@v3
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: 8.0.x
            - name: dotnet Publish
              run: dotnet publish ./${{ env.SRC }}/${{ env.NAME }}.csproj -c Release -r ${{ matrix.RUNTIME }} --framework ${{ env.FRAMEWORK }} --self-contained true /p:Version=${{ env.VERSION }} /p:PublishReadyToRun=true /p:PublishSingleFile=True /p:PublishTrimmed=false /p:IncludeNativeLibrariesForSelfExtract=True /p:PublishDir="bin\Release/${{ env.FRAMEWORK }}/${{ matrix.RUNTIME }}" --output ${{ env.OUTPUT_ROOT }}/standalone/${{ matrix.RUNTIME }}
            - name: Decode PFX file
              run: |
                  $pfx_base64 = "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}"
                  $pfx_bytes = [System.Convert]::FromBase64String($pfx_base64)
                  [System.IO.File]::WriteAllBytes("certificate.pfx", $pfx_bytes)
            - name: Sign with PFX
              run: |
                  $binaryPath = "${{ env.OUTPUT_ROOT }}/standalone/${{ matrix.RUNTIME }}/DlMirrorSync.exe"
                  $pfxPath = "certificate.pfx"
                  $pfxPassword = "${{ secrets.SM_CLIENT_CERT_PASSWORD }}"
                  $signToolPath = "C:\Program Files (x86)\Windows Kits\10\App Certification Kit\signtool.exe"
                  & $signToolPath sign /debug /d "MirrorSync" /v /f $pfxPath /p $pfxPassword /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 $binaryPath
            - name: Setup WiX
              if: matrix.RUNTIME == 'win-x64'
              run: dotnet tool install -g wix; wix extension add -g WixToolset.UI.wixext
            - name: Build installer
              if: matrix.RUNTIME == 'win-x64'
              working-directory: ./MsiInstaller
              run: dotnet build MsiInstaller.wixproj -c Release -r win-x64 --output ../${{ env.OUTPUT_ROOT }}
            - name: Upload installer
              uses: actions/upload-artifact@v3
              if: matrix.RUNTIME == 'win-x64'
              with:
                  name: ${{ env.NAME }}-${{ env.VERSION }}-service-win-x64.msi
                  path: ${{ env.OUTPUT_ROOT }}/en-us/*.msi
            - name: Upload binaries
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.NAME }}-${{ env.VERSION }}-standalone-${{ matrix.RUNTIME }}
                  path: ${{ env.OUTPUT_ROOT }}/standalone/${{ matrix.RUNTIME }}/
